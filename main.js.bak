// Main application logic for Code of Music Parser
// Simplified based on BeatParser example

let jar; // CodeJar instance
let drumMachineData = null;
let editorTimeout;

// Initialize when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    initializeEditor();
    initializeAudioControls();
});

/**
 * Initialize the code editor with CodeJar
 */
function initializeEditor() {
    const highlight = editor => {
        // We use Prism.js for syntax highlighting
        if (typeof Prism !== 'undefined') {
            editor.textContent = editor.textContent;
            Prism.highlightElement(editor);
        }
    };

    const editorElement = document.getElementById('editor');
    if (!editorElement) {
        console.error('Editor element not found');
        return;
    }

    // Set up editor with line numbers
    jar = CodeJar(editorElement, highlight, {
        tab: '  ',
        indentOn: /[(]$/
    });
    withLineNumbers(jar, {
        lineNumbers: document.querySelector('.line-numbers')
    });

    // Set initial editor content
    jar.updateCode(`(drum-machine "basic-beat"
  (arrangement :active 1
    (track "kick" kick :active 1
      (notes
        (note :active 1)
        (note :active 0)
        (note :active 1)
        (note :active 0)
      )
    )
    (track "hihat" hihat :active 1
      (notes
        (note :active 1)
        (note :active 1)
        (note :active 1)
        (note :active 1)
      )
    )
    (track "snare" snare :active 1
      (notes
        (note :active 0)
        (note :active 1)
        (note :active 0)
        (note :active 1)
      )
    )
  )
)`);

    // Set up editor change event
    jar.onUpdate(code => {
        clearTimeout(editorTimeout);
        editorTimeout = setTimeout(() => {
            parseCode(code);
        }, 500);
    });

    // Set up keyboard shortcuts
    document.addEventListener('keydown', event => {
        // Ctrl+Enter to execute code
        if (event.ctrlKey && event.key === 'Enter') {
            event.preventDefault();
            executeCode(jar.toString());
        }
    });
}

/**
 * Initialize audio control buttons
 */
function initializeAudioControls() {
    const testButton = document.getElementById('test-audio');
    const runButton = document.getElementById('run');

    if (testButton) {
        testButton.addEventListener('click', initializeAudioContext);
    }

    if (runButton) {
        runButton.addEventListener('click', () => {
            executeCode(jar.toString());
        });
    }
}

/**
 * Initialize the Tone.js audio context
 */
async function initializeAudioContext() {
    try {
        await Tone.start();
        console.log('Audio context started');
        showMessage('Audio context initialized');
        
        // Load samples
        await player.init(drumMachineData || {});
        
        // Disable test button after successful initialization
        const testButton = document.getElementById('test-audio');
        if (testButton) {
            testButton.textContent = 'Audio Ready';
            testButton.disabled = true;
        }
        
        // Parse current code
        parseCode(jar.toString());
    } catch (e) {
        console.error('Failed to start audio context:', e);
        showError(`Audio initialization failed: ${e.message}`);
    }
}

/**
 * Parse the Lisp-like code into a data structure
 * @param {string} code - The code to parse
 */
function parseCode(code) {
    try {
        console.log('Parsing code...');
        const ast = parser.parse(code);
        drumMachineData = parser.extractData(ast);
        console.log('Parsed data:', drumMachineData);
        hideError();
        
        // If transport is running, schedule update
        if (Tone.Transport && Tone.Transport.state === 'started') {
            player.update(drumMachineData);
        }
    } catch (e) {
        console.error('Parse error:', e);
        showError(e.message);
    }
}

/**
 * Execute the parsed code, starting audio playback
 * @param {string} code - The code to execute
 */
function executeCode(code) {
    // Ensure audio context is initialized
    if (Tone.context.state !== 'running') {
        initializeAudioContext().then(() => {
            executeCode(code);
        });
        return;
    }
    
    try {
        // Parse the code if not already parsed
        if (!drumMachineData) {
            parseCode(code);
        }
        
        if (drumMachineData) {
            console.log('Starting playback with data:', drumMachineData);
            player.start(drumMachineData);
            showMessage('Playback started');
        } else {
            showError('No valid drum machine data to play');
        }
    } catch (e) {
        console.error('Execution error:', e);
        showError(`Execution failed: ${e.message}`);
    }
}

/**
 * Show an error message
 * @param {string} message - The error message to display
 */
function showError(message) {
    const errorElement = document.createElement('div');
    errorElement.className = 'error-message';
    errorElement.textContent = message;
    
    // Remove any existing error messages
    hideError();
    
    // Add the new error message
    document.body.appendChild(errorElement);
    
    // Automatically hide after 5 seconds
    setTimeout(() => {
        errorElement.remove();
    }, 5000);
}

/**
 * Show a status message
 * @param {string} message - The message to display
 */
function showMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'status-message';
    messageElement.textContent = message;
    
    // Add the message
    document.body.appendChild(messageElement);
    
    // Automatically hide after 2 seconds
    setTimeout(() => {
        messageElement.remove();
    }, 2000);
}

/**
 * Hide any displayed error messages
 */
function hideError() {
    document.querySelectorAll('.error-message').forEach(el => el.remove());
}

// Create stop function that can be called from the console for debugging
window.stopPlayback = () => {
    if (player) {
        player.stop();
        showMessage('Playback stopped');
    }
};

